#	#	SPECIAL_SYMBOL	(Line 1)
include	include	IDENTIFIER	(Line 1)
<	<	OPERATOR	(Line 1)
stdio	stdio	IDENTIFIER	(Line 1)
.	.	SPECIAL_SYMBOL	(Line 1)
h	h	IDENTIFIER	(Line 1)
>	>	OPERATOR	(Line 1)
int	int	KEYWORD	(Line 2)
main	main	IDENTIFIER	(Line 2)
(	(	SPECIAL_SYMBOL	(Line 2)
)	)	SPECIAL_SYMBOL	(Line 2)
{	{	SPECIAL_SYMBOL	(Line 2)
int	int	KEYWORD	(Line 3)
x	x	IDENTIFIER	(Line 3)
=	=	OPERATOR	(Line 3)
10	10	CONSTANT (int)	(Line 3)
,	,	SPECIAL_SYMBOL	(Line 3)
y	y	IDENTIFIER	(Line 3)
=	=	OPERATOR	(Line 3)
20	20	CONSTANT (int)	(Line 3)
;	;	SPECIAL_SYMBOL	(Line 3)
float	float	KEYWORD	(Line 4)
z	z	IDENTIFIER	(Line 4)
=	=	OPERATOR	(Line 4)
3	3	CONSTANT (int)	(Line 4)
.	.	SPECIAL_SYMBOL	(Line 4)
14e	14e	UNKNOWN	(Line 4)
-	-	OPERATOR	(Line 4)
2	2	CONSTANT (int)	(Line 4)
;	;	SPECIAL_SYMBOL	(Line 4)
char	char	KEYWORD	(Line 5)
c	c	IDENTIFIER	(Line 5)
=	=	OPERATOR	(Line 5)
'a'	'a'	CONSTANT (char)	(Line 5)
;	;	SPECIAL_SYMBOL	(Line 5)
if	if	KEYWORD	(Line 6)
(	(	SPECIAL_SYMBOL	(Line 6)
x	x	IDENTIFIER	(Line 6)
!=	!=	OPERATOR	(Line 6)
y	y	IDENTIFIER	(Line 6)
)	)	SPECIAL_SYMBOL	(Line 6)
{	{	SPECIAL_SYMBOL	(Line 6)
z	z	IDENTIFIER	(Line 7)
+=	+=	OPERATOR	(Line 7)
x	x	IDENTIFIER	(Line 7)
*	*	OPERATOR	(Line 7)
y	y	IDENTIFIER	(Line 7)
;	;	SPECIAL_SYMBOL	(Line 7)
printf	printf	IDENTIFIER	(Line 8)
(	(	SPECIAL_SYMBOL	(Line 8)
"Hello\n"	"Hello\n"	CONSTANT (string)	(Line 8)
)	)	SPECIAL_SYMBOL	(Line 8)
;	;	SPECIAL_SYMBOL	(Line 8)
}	}	SPECIAL_SYMBOL	(Line 9)
/	/	OPERATOR	(Line 11)
*	*	OPERATOR	(Line 11)
Multi	Multi	IDENTIFIER	(Line 12)
-	-	OPERATOR	(Line 12)
line	line	IDENTIFIER	(Line 12)
comment	comment	IDENTIFIER	(Line 13)
*	*	OPERATOR	(Line 14)
/	/	OPERATOR	(Line 14)
return	return	KEYWORD	(Line 15)
0	0	CONSTANT (int)	(Line 15)
;	;	SPECIAL_SYMBOL	(Line 15)
}	}	SPECIAL_SYMBOL	(Line 16)
